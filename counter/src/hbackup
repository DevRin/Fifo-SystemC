
#include <systemc.h>


template<typename T, int SIZE>
SC_MODULE(FIFOMODULE)

{


  	sc_inout <bool> read_nbNow;
  	sc_inout <bool> write_nbNow;
  	sc_inout <bool> read_bNow;
  	sc_inout <bool> write_bNow;
      	sc_inout <bool>   reset;

	sc_clock clk;


        void write_b_func ();
	void read_b_func();
	void write_nb_func();
	void read_nb_func();
	void reset_func();

//	void initialize_Me();



    	SC_CTOR(FIFOMODULE){

	SC_METHOD(write_b_func);
	sensitive<<write_bNow.pos();

	SC_METHOD(read_b_func);
	sensitive<<read_bNow.pos();

	SC_METHOD(read_nb_func);
	sensitive<<read_nbNow.pos();

	SC_METHOD(write_nb_func);
	sensitive<<write_nbNow.pos();

	SC_METHOD(reset_func);
	sensitive<<reset.pos();

	//    	SC_THREAD(initialize_Me);



	myFifo = new T [SIZE];
	currentIndex = -1;

      }

      public:
	sc_inout<bool>  fifoFlagRead;
	sc_inout<bool>  fifoFlagWrite;
	sc_inout<T> nextElement;
	sc_inout<T> currentElement;

	int currentIndex;
	T *myFifo;

};


/*
template<typename T, int SIZE>
SC_MODULE(read_b)
{
	sc_inout < T* > fifo;

    	sc_inout <T> currentElement;

  	sc_inout <int> currentIndex;

	sc_inout <bool> read_bNow;

    	sc_inout <bool>  fifoFlag;

	sc_clock clk;

  	sc_inout < T > nextElement;

	void read_b_func();
    	SC_CTOR(read_b){
    	SC_CTHREAD(read_b_func,read_bNow);
      }
};

template<typename T, int SIZE>
SC_MODULE(write_nb)

{
	sc_inout < T* > fifo;

  	sc_inout <int> currentIndex;

	sc_inout <bool> write_nbNow;

  	sc_inout <bool>  fifoFlag;

	sc_clock clk;
  	void write_nb_func();
  	sc_inout < T > nextElement;


    SC_CTOR(write_nb){
    SC_CTHREAD(write_nb_func,write_nbNow);


      }
};

template<typename T, int SIZE>
SC_MODULE(read_nb)
{
	sc_inout < T* > fifo;



    	sc_inout < T > currentElement;

  	sc_inout <int> currentIndex;

	sc_inout <bool> read_nbNow;

    	sc_inout <bool>  fifoFlag;

	sc_clock clk;

  	sc_inout < T > nextElement;
	void read_nb_func();

    	SC_CTOR(read_nb){
    	SC_CTHREAD(read_nb_func,read_nbNow);

      }
};
template<typename T, int SIZE>
SC_MODULE(resetting)
{
	sc_inout < T* > fifo;


  	sc_inout <bool> read_nbNow;

  	sc_inout <bool> write_nbNow;

  	sc_inout <bool> read_bNow;

  	sc_inout <bool> write_bNow;

    	sc_inout < T > currentElement;

  	sc_inout <int> currentIndex;


  	sc_inout <bool>  fifoFlag;

      	sc_inout <bool>  reset;

	sc_clock clk;

  	sc_inout < T > nextElement;



	void reset_func();

    	SC_CTOR(resetting){
    	SC_CTHREAD(reset_func,reset);

      }
};


template<typename T, int SIZE>
SC_MODULE(initializer)
{


  	sc_inout <int> currentIndex;

  	sc_inout <bool> read_nbNow;

  	sc_inout <bool> write_nbNow;

  	sc_inout <bool> read_bNow;

  	sc_inout <bool> write_bNow;

  	sc_inout <bool>  fifoFlag;

    	sc_inout <bool>  reset;

	sc_clock clk;

  	sc_inout < T > nextElement;

    	void initialize_Me();
  	SC_CTOR(initializer){
    	SC_THREAD(initialize_Me);
      }


};

*/

template<typename T, int SIZE>
SC_MODULE(producer)
{

  	sc_inout <bool> read_nbNow;
	sc_inout <bool> write_nbNow;
	sc_inout <bool> read_bNow;
	sc_inout <bool> write_bNow;
      	sc_inout <bool>  reset;

	sc_clock clk;


  	void feed();
  	SC_CTOR(producer){


    	SC_METHOD(feed);
	sensitive_pos<<clk;

	dont_initialize();
      }


public:
	sc_inout<bool>  fifoFlagRead;
	sc_inout<bool>  fifoFlagWrite;
	sc_inout<T> nextElement;
	sc_inout<T> currentElement;
};



